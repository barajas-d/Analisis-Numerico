else{
if((tam %% 2) == 0){
paso = (tam/2)
}
else{
paso = ((tam+1)/2)
}
return(1 + maxTrape(paso))
}
}
pasoPivote <- function(cantiParticiones, tamDatos){
while(cantiParticiones>1){
if((tamDatos %% 2) == 0){
tamDatos = (tamDatos/2)
}
else{
tamDatos = ((tamDatos+1)/2)
}
cantiParticiones = cantiParticiones - 1
}
return(tamDatos-1)
}
trapecio <- function(x1, y1, x2, y2){
h = x2-x1
area = (h/2)*((y1+y2))
return(area)
}
integralApro <- function (nivel, tam, x, y){
total = 0
paso = pasoPivote(nivel, tam)
trap = seq(1, tam, by = paso)
anterior = -1
for (i in trap){
if(anterior == -1){
anterior = i
}
else{
total = total + trapecio(x[anterior], y[anterior], x[i], y[i])
anterior = i
}
}
return(total)
}
if(length(x) != length(y)){
stop("Los valores para 'Y' no coinciden con los valores en 'X'")
} else if(length(x) < 3){
stop("Se nesesitan mas valores para hallar la integral")
} else{
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i])-((1/((4^(k-1))-1))*(inte[i+1]))
}
canti = canti -1
nivel = nivel +1
}
return(inte[1])
# i21 = ((4/3*inte[2])-(1/3*inte[1]))
# i22 = ((4/3*inte[3])-(1/3*inte[2]))
#
# final = ((16/15*i22)-(1/15*i21))
#
# cat("la integral definida de ", x[posInicial], "a", x[posFinal], " con los valores dados es de ", final)
#
# return (final)
}
integral(x, y)
integral(x, y)
integral <- function(x, y){
maxTrape <- function(tam){
if(tam <= 2){
return (1)
}
else{
if((tam %% 2) == 0){
paso = (tam/2)
}
else{
paso = ((tam+1)/2)
}
return(1 + maxTrape(paso))
}
}
pasoPivote <- function(cantiParticiones, tamDatos){
while(cantiParticiones>1){
if((tamDatos %% 2) == 0){
tamDatos = (tamDatos/2)
}
else{
tamDatos = ((tamDatos+1)/2)
}
cantiParticiones = cantiParticiones - 1
}
return(tamDatos-1)
}
trapecio <- function(x1, y1, x2, y2){
h = x2-x1
area = (h/2)*((y1+y2))
return(area)
}
integralApro <- function (nivel, tam, x, y){
total = 0
paso = pasoPivote(nivel, tam)
trap = seq(1, tam, by = paso)
anterior = -1
for (i in trap){
if(anterior == -1){
anterior = i
}
else{
total = total + trapecio(x[anterior], y[anterior], x[i], y[i])
anterior = i
}
}
return(total)
}
if(length(x) != length(y)){
stop("Los valores para 'Y' no coinciden con los valores en 'X'")
} else if(length(x) < 3){
stop("Se nesesitan mas valores para hallar la integral")
} else{
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i])-((1/((4^(nivel-1))-1))*(inte[nivel+1]))
}
canti = canti -1
nivel = nivel +1
}
return(inte[1])
# i21 = ((4/3*inte[2])-(1/3*inte[1]))
# i22 = ((4/3*inte[3])-(1/3*inte[2]))
#
# final = ((16/15*i22)-(1/15*i21))
#
# cat("la integral definida de ", x[posInicial], "a", x[posFinal], " con los valores dados es de ", final)
#
# return (final)
}
integral(x, y)
integral(x, y)
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i])-((1/((4^(nivel-1))-1))*(inte[nivel+1]))
}
canti = canti -1
nivel = nivel +1
}
x = seq(1,5,by=1)
y = seq(1,5,by=1)
for (i in 1:length(x)){
y[i] = x[i]^2
}
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i])-((1/((4^(nivel-1))-1))*(inte[nivel+1]))
}
canti = canti -1
nivel = nivel +1
}
(length(x))
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
canti = particiones
nivel = 2
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i])-((1/((4^(nivel-1))-1))*(inte[nivel+1]))
}
canti = canti -1
nivel = nivel +1
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i])-((1/((4^(nivel-1))-1))*(inte[nivel+1]))
}
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
}
canti = particiones
nivel = 2
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i])-((1/((4^(nivel-1))-1))*(inte[i+1]))
}
canti = canti -1
nivel = nivel +1
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i])-((1/((4^(nivel-1))-1))*(inte[i+1]))
}
canti = canti -1
nivel = nivel +1
return(inte[1])
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
canti = particiones
nivel = 2
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i+1])-((1/((4^(nivel-1))-1))*(inte[i]))
}
canti = canti -1
nivel = nivel +1
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i+1])-((1/((4^(nivel-1))-1))*(inte[i]))
}
canti = canti -1
nivel = nivel +1
print(inte[1])
x = seq(1,5,by=0.02)
y = seq(1,5,by=0.02)
for (i in 1:length(x)){
y[i] = x[i]^2
}
particiones = 3#maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i+1])-((1/((4^(nivel-1))-1))*(inte[i]))
}
canti = canti -1
nivel = nivel +1
}
print(inte[1])
x = seq(1,5,by=0.0001)
y = seq(1,5,by=0.0001)
for (i in 1:length(x)){
y[i] = x[i]^2
}
print(x)
print(y)
integral(x, y)
print(length(x))
paso = pasoPivote(1, length(x))
trap = seq(1, length(x), by = paso)
i1 = integralApro(1, length(x), x, y)
print(i1)
#Integral con dos trapecios
i2 = integralApro(2, length(x), x, y)
print(i2)
#Integral con tres trapecios
i3 = integralApro(3, length(x), x, y)
print(i3)
particiones = 3#maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i+1])-((1/((4^(nivel-1))-1))*(inte[i]))
}
canti = canti -1
nivel = nivel +1
}
print(inte[1])
print(inte[1])
x = seq(1,5,by=0.01)
y = seq(1,5,by=0.01)
for (i in 1:length(x)){
y[i] = x[i]^2
}
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i+1])-((1/((4^(nivel-1))-1))*(inte[i]))
}
canti = canti -1
nivel = nivel +1
}
print(inte[1])
integral <- function(x, y){
maxTrape <- function(tam){
if(tam <= 2){
return (1)
}
else{
if((tam %% 2) == 0){
paso = (tam/2)
}
else{
paso = ((tam+1)/2)
}
return(1 + maxTrape(paso))
}
}
pasoPivote <- function(cantiParticiones, tamDatos){
while(cantiParticiones>1){
if((tamDatos %% 2) == 0){
tamDatos = (tamDatos/2)
}
else{
tamDatos = ((tamDatos+1)/2)
}
cantiParticiones = cantiParticiones - 1
}
return(tamDatos-1)
}
trapecio <- function(x1, y1, x2, y2){
h = x2-x1
area = (h/2)*((y1+y2))
return(area)
}
integralApro <- function (nivel, tam, x, y){
total = 0
paso = pasoPivote(nivel, tam)
trap = seq(1, tam, by = paso)
anterior = -1
for (i in trap){
if(anterior == -1){
anterior = i
}
else{
total = total + trapecio(x[anterior], y[anterior], x[i], y[i])
anterior = i
}
}
return(total)
}
if(length(x) != length(y)){
stop("Los valores para 'Y' no coinciden con los valores en 'X'")
} else if(length(x) < 3){
stop("Se nesesitan mas valores para hallar la integral")
} else{
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
posInicial = 1
posFinal = length(x)
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i+1])-((1/((4^(nivel-1))-1))*(inte[i]))
}
canti = canti -1
nivel = nivel +1
}
return(inte[1])
# i21 = ((4/3*inte[2])-(1/3*inte[1]))
# i22 = ((4/3*inte[3])-(1/3*inte[2]))
#
# final = ((16/15*i22)-(1/15*i21))
#
# cat("la integral definida de ", x[posInicial], "a", x[posFinal], " con los valores dados es de ", final)
#
# return (final)
}
integral(x, y)
integral <- function(x, y){
maxTrape <- function(tam){
if(tam <= 2){
return (1)
}
else{
if((tam %% 2) == 0){
paso = (tam/2)
}
else{
paso = ((tam+1)/2)
}
return(1 + maxTrape(paso))
}
}
pasoPivote <- function(cantiParticiones, tamDatos){
while(cantiParticiones>1){
if((tamDatos %% 2) == 0){
tamDatos = (tamDatos/2)
}
else{
tamDatos = ((tamDatos+1)/2)
}
cantiParticiones = cantiParticiones - 1
}
return(tamDatos-1)
}
trapecio <- function(x1, y1, x2, y2){
h = x2-x1
area = (h/2)*((y1+y2))
return(area)
}
integralApro <- function (nivel, tam, x, y){
total = 0
paso = pasoPivote(nivel, tam)
trap = seq(1, tam, by = paso)
anterior = -1
for (i in trap){
if(anterior == -1){
anterior = i
}
else{
total = total + trapecio(x[anterior], y[anterior], x[i], y[i])
anterior = i
}
}
return(total)
}
if(length(x) != length(y)){
stop("Los valores para 'Y' no coinciden con los valores en 'X'")
} else if(length(x) < 3){
stop("Se nesesitan mas valores para hallar la integral")
} else{
particiones = maxTrape(length(x))
inte = seq(1, particiones, by=1)
for (i in 1:particiones) {
inte[i] = integralApro(i, length(x), x, y)
}
}
canti = particiones
nivel = 2
while(canti > 1){
for (i in 1:canti-1) {
inte[i] = (((4^(nivel-1))/((4^(nivel-1))-1))*inte[i+1])-((1/((4^(nivel-1))-1))*(inte[i]))
}
canti = canti -1
nivel = nivel +1
}
return(inte[1])
}
integral(x, y)
x = seq(1,5,by=0.01)
y = seq(1,5,by=0.01)
for (i in 1:length(x)){
y[i] = x[i]^2
}
integral(x, y)
x = seq(1,5,by=0.0000000000000000000001)
y = seq(1,5,by=0.0000000000000000000001)
x = seq(1,5,by=0.000001)
y = seq(1,5,by=0.000001)
for (i in 1:length(x)){
y[i] = x[i]^2
}
integral(x, y)
library(Richardson)
